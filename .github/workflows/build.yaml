name: Build, QA, Release

on: push

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  FONTFORGE_COMMIT: aa062f4cbd1db21e27b2620f16993ebe4c540ab6
  PYTHON_VERSION: 3.11

jobs:
  build-ttf:
    runs-on: ubuntu-latest
    name: Build main TTFs
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Ubuntu requirements
      run: |
        sudo apt-get update
        sudo apt-get -qy --no-install-recommends install \
          build-essential \
          cmake \
          ninja-build \
          packaging-dev \
          pkg-config
    - name: Install fontforge
      run: |
        curl -Lo fontforge.zip https://github.com/fontforge/fontforge/archive/${{ env.FONTFORGE_COMMIT }}.zip
        unzip fontforge.zip
        mv fontforge-${{ env.FONTFORGE_COMMIT }} fontforge
        cd fontforge
        curl -O https://patch-diff.githubusercontent.com/raw/fontforge/fontforge/pull/4232.patch
        patch -p1 <4232.patch
        mkdir build
        cd build
        cmake -G Ninja \
          -D CMAKE_INSTALL_PREFIX="$PWD/target" \
          -D ENABLE_DOCS=OFF \
          -D ENABLE_GUI=OFF \
          -D ENABLE_LIBGIF=OFF \
          -D ENABLE_LIBJPEG=OFF \
          -D ENABLE_LIBPNG=OFF \
          -D ENABLE_LIBREADLINE=OFF \
          -D ENABLE_LIBSPIRO=OFF \
          -D ENABLE_LIBTIFF=OFF \
          -D ENABLE_LIBUNINAMESLIST=OFF \
          -D ENABLE_PYTHON_EXTENSION=ON \
          -D ENABLE_NATIVE_SCRIPTING=OFF \
          -D ENABLE_WOFF2=OFF \
          .. \
        ;
        ninja
        sudo ninja install
    - name: Add site-packages to default search path
      run: echo "PYTHONPATH=$PWD/fontforge/build/target/lib/python${{ env.PYTHON_VERSION }}/site-packages:$PYTHONPATH" >>"$GITHUB_ENV"
    # - name: Setup tmate session
    #   uses: mxschmitt/action-tmate@v3
    - name: Build fonts
      run: make build
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: fontbuild-ttf
        path: fonts

  fontbakery-googlefonts:
    name: Check with Fontbakery
    runs-on: ubuntu-latest
    needs: build-ttf
    steps:
    - uses: actions/checkout@v2
    - name: Download font build zip
      uses: actions/download-artifact@v3
      with:
        name: fontbuild-ttf
        path: fonts
    - name: Test
      run: find .
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Make directories
      run: mkdir -p out/fontbakery out/badges
      continue-on-error: true
    - name: Install dependencies
      run: make venv
    - name: Check with fontbakery
      run: |
        for family_path in fonts/*; do
          family=`basename $family_path`
          . venv/bin/activate ; fontbakery check-googlefonts --configuration fontbakery.yml -l WARN --succinct --badges out/badges --html out/fontbakery/googlefonts-$family-report.html --ghmarkdown out/fontbakery/googlefonts-$family-report.md $family_path/googlefonts/*ttf/*ttf || true
        done
      continue-on-error: true
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: fontbakery-googlefonts
        path: out

  report:
    name: Rebuild website
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - fontbakery-googlefonts
    steps:
    - uses: actions/checkout@v2
    - name: Download font zip
      uses: actions/download-artifact@v3
      with:
        name: fontbuild-ttf
        path: fonts
    - name: Download fontbakery-googlefonts zip
      uses: actions/download-artifact@v3
      with:
        name: fontbakery-googlefonts
        path: out
    - name: Download regression test zip
      uses: actions/download-artifact@v3
      with:
        name: regression
        path: out
      continue-on-error: true
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: make venv
    - name: Rebuild website
      run: . venv/bin/activate; python3 scripts/template.py
    - name: Copy fonts to gh-pages dir
      run: cp -r fonts out
    - name: Deploy
      uses: peaceiris/actions-gh-pages@v3
      if: ${{ github.ref == 'refs/heads/main' }}
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./out
    - name: gen zip file name
      id: zip-name
      shell: bash
      # Set the archive name to repo name + "-assets" e.g "MavenPro-assets"
      run: echo "ZIP_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')-fonts" >> $GITHUB_ENV
    - name: Archive artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ZIP_NAME }}
        path: out

  create_release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs:
      - build-ttf
    runs-on: ubuntu-latest
    name: Create release
    outputs:
      url: ${{ steps.upload.outputs.browser_download_url }}
      config_file: ${{ steps.check_tag.outputs.config_file }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: make venv
      - run: pip3 install 'git+https://github.com/googlefonts/gftools@noto#egg=gftools'
      - name: Download font zip
        uses: actions/download-artifact@v3
        with:
          name: fontbuild-ttf
          path: fonts
      - name: Check for appropriate tag
        id: check_tag
        run: . venv/bin/activate; python3 scripts/check-tag.py ${{ github.ref_name }}
      - name: Create release
        id: release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
      - name: Tell user about release
        run: echo '::warning file=sources/config.yaml,title=A new release ${{ github.ref_name }} has been created'
      - name: Find a DESCRIPTION.en_us.html
        run: cp documentation/${{ steps.check_tag.outputs.family}}.html DESCRIPTION.en_us.html
        continue-on-error: true
      - name: Find an ARTICLE.en_us.html
        run: cp documentation/${{ steps.check_tag.outputs.family}}.article.html ARTICLE.en_us.html
        continue-on-error: true
      - name: Create release bundle
        run: cd fonts; zip -x requirements.txt -r ../${{ github.ref_name }}.zip ${{ steps.check_tag.outputs.family}}/ ../*.txt ../DESCRIPTION.en_us.html ../ARTICLE.en_us.html
      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        id: upload
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.ref_name }}.zip
          asset_name: ${{ github.ref_name }}.zip
          tag: ${{ github.ref_name }}
          overwrite: true
          body: "Production ready fonts"

  google_fonts_pr:
    runs-on: ubuntu-latest
    environment: googlefonts
    name: Submit PR to Google Fonts
    needs: create_release
    if: needs.create_release.outputs.url
    steps:
      - name: Check SSH_KEY is set
        run: |
          if [[ "${{ secrets.SSH_KEY }}" == "" ]];
          then
            echo "::error file=sources/config.yaml,title=SSH_KEY was not set in repository secrets::Generate an SSH key (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key), add the public key to your GitHub account (https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account) and add the private key to an environment secret called SSH_KEY in an environment called 'googlefonts' by going to $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/settings/secrets/actions";
            exit 1
          fi
      - name: Check USER_GITHUB_TOKEN is set
        run: |
          if [[ "${{ secrets.USER_GITHUB_TOKEN }}" == "" ]];
          then
            echo "::error file=sources/config.yaml,title=USER_GITHUB_TOKEN was not set in repository secrets::Generate a personal access token with a repo scope by visiting https://github.com/settings/tokens/new and add it to an environment secret called USER_GITHUB_TOKEN in an environment called 'googlefonts' by going to $GITHUB_SERVER_URL/$GITHUB_REPOSITORY/settings/secrets/actions";
            exit 1
          fi
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - run: pip3 install 'git+https://github.com/googlefonts/gftools#egg=gftools'
      - name: Generate / update upstream.yaml
        run: python3 -m gftools.actions.updateupstream ${{ needs.create_release.outputs.url }} --config "${{ needs.create_release.outputs.config_file }}"
      - uses: actions/checkout@v2
        name: Check out Google Fonts repository
        with:
          fetch-depth: 0
          repository: google/fonts
          path: "googlefonts"
          ssh-key:  ${{ secrets.SSH_KEY }}
      - name: Set git username and email
        run: |
          git config --global user.email "${GH_USERNAME}@users.noreply.github.com"
          git config --global user.name "${GH_USERNAME}"
        env:
          GH_USERNAME: ${{ github.actor }}
      - name: Do SSH magic
        run: cd googlefonts; git remote add googlefonts git@github.com:google/fonts.git ; cd ..
      - name: Test fetch
        run: cd googlefonts; git fetch googlefonts main ; cd ..
      - name: Run the packager
        run: gftools packager upstream.yaml googlefonts -p -y
        env:
          GH_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.USER_GITHUB_TOKEN }}


